Given an array Arr[] of N integers and an integer K. Find the maximum for each and every contiguous subarray of size K.

 

Example 1:

Input:
N = 9 
K = 3
Arr = {1, 2, 3, 1, 4, 5, 2, 3, 6}
Output:
3 3 4 5 5 5 6

Explanation:
Starting from the first subarray of size
K = 3, we have 3 as maximum. Moving the
window forward, maximum elements are 
as 3, 4, 5, 5, 5, and 6.
 

Example 2:

Input:
N = 10 
K = 4
Arr ={8, 5, 10, 7, 9, 4, 15, 12, 90, 13}
Output:
10 10 10 15 15 90 90

Explanation:
Starting from the first subarray of size 
K = 4, we have 10 as maximum. Moving the
window forward maximum elements are as 
follows 10 10 10 15 15 90 90.

Your Task:
You don't need to read input or print anything. Your task is to complete the​ function max_of_subarrays() which takes N (number of elements in array Arr) ,Arr[] and an integer K as input parameters and returns a list of integers.

 

Expected Time Complexity : O(N)
Expected Auxilliary Space : O(K)

 

Constraints:
1 ≤ N ≤ 10^6
1 ≤ K ≤ N
0 ≤ Arr[i] <= 10^7

SOLUTION:

DP SOLUTION:

class Solution{
    public:
vector <int> max_of_subarrays(int N, int *Arr,  int K){
    // your code here
    deque<int> dq;
    
    for(int i = 0; i < min(K, N); i++)
    {
        while(!dq.empty() and Arr[i] >= Arr[dq.back()])
        {
            dq.pop_back();
        }
        
        dq.push_back(i);
    }
    
    vector<int> res;
    
    for(int i = K; i < N; i++)
    {
        res.push_back(Arr[dq.front()]);
        
        while(!dq.empty() and (i - K) >= dq.front())
        {
            dq.pop_front();
        }
        
        while(!dq.empty() and Arr[i] >= Arr[dq.back()])
        {
            dq.pop_back();
        }
        
        dq.push_back(i);
    }
    
    res.push_back(Arr[dq.front()]);
    
    return res;
}
};

MULTISET SOLUTION:

vector <int> max_of_subarrays(int *arr, int n, int k){
    // your code here
    multiset<int>s;
vector<int>ans;
for(int i = 0; i < n; i++)
{
s.insert(arr[i]);
if(s.size() == k)
{
ans.push_back(*s.rbegin());
s.erase(s.find(arr[i-k+1]));
}
}
return ans;
}
