Given an array A[] with N elements , you need to find the sum all sub arrays of array A.


Example 1:

Input:
N = 3
A[] = {1, 2, 3}
Output: 20
Explanation:
All subarrays are [1], [2], [3],
[1,2], [2,3], [1,2,3].
Thus total sum is 20.
 

Example 2:

Input:
N = 2
A[] = {1, 3}
Output: 8

Your Task:  
You don't need to read input or print anything. Your task is to complete the function subarraySum() which takes the array A[] and its size N as inputs and returns the sum. Since the sum could be very large return the sum modulo (109+7).


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints :
1 <= N <= 10^5
1 <= A[] <= 10^9

SOLUTION:

#define ll long long
#define mod 1000000007
class Solution{   
public:
    long long subarraySum(long long A[], long long N)
    {
        // Your code goes here
        ll ans = 0;
        for(ll i = 0; i < N; i++)
        {
            ll x = (N - i);
            ll y = (i+1)*x;
            ll z = ((A[i]%mod)*(y%mod))%mod;
            ans = (ans%mod+z%mod)%mod;
        }
        return ans;
    }
};

