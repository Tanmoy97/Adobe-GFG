There are N stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top.
Note: order does matter.


Example 1:

Input:
N = 4
Output: 5
Explanation: You can reach 4th stair in
5 ways.
 

Example 2:

Input:
N = 10
Output: 89
 

Your Task:
You don't need to read input or print anything. Complete the function countWays() which takes the integer N (the top stair number) as input parameters and return the total number of ways to reach the Nth stair. The answer may be very large, compute the answer modulo 109 + 7.


Expected Time Complexity : O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 <= N <= 10^5

SOLUTION:

DP SOLUTION:

class Solution{
    public:
long long countWays(int N){
    // your code here
    long long dp[N+1];
    
    dp[0] = 1;
    dp[1] = 1;
    
    for(int i = 2; i <= N; i++)
    {
        dp[i] = (dp[i-1] + dp[i-2])%1000000007;
    }
    
    return dp[N];
}
};

RECURSIVE SOLUTION:

class Solution{
    public:
long long countWays(int N){
    // your code here
    if(N == 0 || N == 1)
    {
        return 1;
    }
    
    long long res;
    long long prev_prev = 1;
    long long prev = 1;
    
    for(int i = 2; i <= N; i++)
    {
        res = (prev_prev + prev)%1000000007;
        
        prev_prev = prev;
        prev = res;
    }
    
    return res;
}
};


